'''
Created on 14 May 2015

@author: ooe
'''
import unittest
import numpy
from util import cleanResults, getMean, outliers



class Test(unittest.TestCase):


    def setUp(self):
        self.powers = [(62.9,), (75.9,), (97.4,), (96.8,), (97.3,), (94.8,), (95.3,), (86.8,), (80.9,), (81.9,), (81.7,), (81.2,), (81.2,), (80.8,), (80.7,), (80.7,), (80.9,), (81.1,), (81.0,), (80.8,), (82.7,), (82.1,), (81.5,), (80.9,), (81.1,), (81.5,), (81.8,), (81.5,), (81.6,), (81.5,), (81.7,), (81.5,), (81.6,), (81.0,), (81.3,), (81.3,), (81.5,), (81.8,), (82.6,), (81.6,), (81.6,), (81.3,), (81.6,), (81.9,), (82.0,)]
        self.cpus = [(0.0,), (81.8,), (101.5,), (109.2,), (123.1,), (103.0,), (103.1,), (112.3,), (109.2,), (109.2,), (110.8,), (110.8,), (109.1,), (106.2,), (110.6,), (103.0,), (103.0,), (103.1,), (104.6,), (119.7,), (110.8,), (103.0,), (104.6,), (104.6,), (109.1,), (104.6,), (109.2,), (109.1,), (98.5,), (110.8,), (109.2,), (101.5,), (110.8,), (109.2,), (110.8,), (112.1,), (109.2,), (112.1,), (109.2,), (109.1,), (112.3,), (106.2,), (112.3,), (110.6,), (112.3,)]
        mems = [(0.29129168505085523,), (0.8010401702096708,), (0.8159229883550322,), (0.8189139084003219,), (0.8203256226616986,), (0.8230772691033653,), (0.8241061455989449,), (0.9735085837012565,), (1.0048534257758925,), (1.0294507522283551,), (1.052947420104151,), (1.0743624076284253,), (1.0549573183745857,), (1.0625422916094405,), (1.0604366838975565,), (1.0712039960605995,), (1.0930496760713955,), (1.1156371042534232,), (1.1453309584630595,), (1.1663391808611745,), (1.2113226183423316,), (1.2613547288599378,), (1.235226051344287,), (1.2395569035698666,), (1.2526451696880543,), (1.2767160942125457,), (1.2695378861038504,), (1.2932020455021827,), (1.3072234786745007,), (1.3119610960262398,), (1.3574948627957302,), (1.3827382279779754,), (1.3881936661405838,), (1.3660369304450777,), (1.373956886725005,), (1.3767324605270337,), (1.3925963004472501,), (1.433392449865002,), (1.4295162174863063,), (1.441695243910726,), (1.4586118876868848,), (1.4686135243183334,), (1.5003172767984043,), (1.4979245407621724,), (1.520033421736954,)]
        pass


    def tearDown(self):
        pass


    def testListconvertedtoNPArray(self):
        p = numpy.array(self.powers)
        self.assertIsNotNone(p)
        self.assertEqual(45, p.size)
        
    def testArrayhasnoZeroesOrNegatives(self):
        self.cpus = cleanResults(self.cpus) #flattens out the lists thanks to SO
        print self.cpus
        for x in self.cpus:
            self.assertGreater(int(x), 0)
            
    def testCleaningResultsandFindingAverage(self):
        self.powers = [(62.9,), (75.9,), (97.4,), (96.8,), (97.3,), (94.8,)]
        np = numpy.array(cleanResults(self.powers))
        print np.mean()
        
    def testRemovingOutliers(self):
        self.powers = [88.8,72.5,72.8,80.5,69.7,70.1,81.3,70.3,69.9,84.5,76.6,71,70.8,81.3,71,71.1,77.9,76.8,71.5,71.5,80.2,71.3,71.3,77.9,74.5,71.2,73.1,81.6,72.3,72.4,85.9,72.4,71.5,76,83.1,71.3,71.3,82.3,72.1,72.2,76.2,76.1,71.5,73,83.2,71.3,9700,-1,-1,72.3,80.3,73.4,81.2,81,74.2,72.2,75.3,78.9,71.8,71.2]
        clean_powers = [88.8,72.5,72.8,80.5,69.7,70.1,81.3,70.3,69.9,84.5,76.6,71,70.8,81.3,71,71.1,77.9,76.8,71.5,71.5,80.2,71.3,71.3,77.9,74.5,71.2,73.1,81.6,72.3,72.4,85.9,72.4,71.5,76,83.1,71.3,71.3,82.3,72.1,72.2,76.2,76.1,71.5,73,83.2,71.3,-1,-1,72.3,80.3,73.4,81.2,81,74.2,72.2,75.3,78.9,71.8,71.2]
        cleaner_powers = [88.8,72.5,72.8,80.5,69.7,70.1,81.3,70.3,69.9,84.5,76.6,71,70.8,81.3,71,71.1,77.9,76.8,71.5,71.5,80.2,71.3,71.3,77.9,74.5,71.2,73.1,81.6,72.3,72.4,85.9,72.4,71.5,76,83.1,71.3,71.3,82.3,72.1,72.2,76.2,76.1,71.5,73,83.2,71.3,72.3,80.3,73.4,81.2,81,74.2,72.2,75.3,78.9,71.8,71.2]
       
        print outliers(self.powers)
        print outliers(clean_powers)
        print outliers(cleaner_powers)
       
        false_mean = numpy.array(self.powers).mean()
        print false_mean
        truer_mean = numpy.array(clean_powers).mean()
        true_mean = getMean(numpy.array(self.powers))
        
        p = numpy.array(cleaner_powers)
        truest_mean = getMean(p[p>0])
#         
#         print true_mean, truer_mean, truest_mean
        self.assertNotEqual(true_mean, false_mean)
        self.assertEqual(true_mean, truer_mean)
              

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()